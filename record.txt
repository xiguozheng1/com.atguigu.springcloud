随笔
-------------consul---------------------------------------------------
consul agent -dev   启动
http://localhost:8500

CAP CAP理论关注粒度是数据，而不是整体系统设计的策略
1   C:Consistency（强一致性）
2   A:Availability（可用性）
3   P:Partition tolerance（分区容错性）
AP(Eureka)
AP架构当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。结论：违背了一致性C的要求，只满足可用性和分区容错，即AP
CP(Zookeeper/Consul)
CP架构当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性结论：违背了可用性A的要求，只满足一致性和分区容错，即CP

-------------Ribbon----------------------------------------------------
com.netflix.loadbalancer.RandomRule     随机
com.netflix.loadbalancer.RoundRobinRule 轮询
com.netflix.loadbalancer.RetryRule      先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务
WeightedResponseTimeRule                对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择
BestAvailableRule                       会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务
AvailabilityFilteringRule               先过滤掉故障实例，再选择并发较小的实例
ZoneAvoidanceRule                       默认规则,复合判断server所在区域的性能和server的可用性选择服务器

负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。
-------------Feign----------------------------------------------------
Feign能干什么  ----个人理解一句话"简化服务之间调用"

Feign旨在使编写Java Http客户端变得更容易。
前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。
但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。
所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。
在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。
Feign集成了Ribbon利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。
而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用

                ======Feign超时控制======
#设置feign客户端超时时间(OpenFeign默认支持ribbon)
ribbon:
  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
  ReadTimeout: 5000
  #指的是建立连接后从服务器读取到可用资源所用的时间
  ConnectTimeout: 5000
                ======Feign日志打印======
                日志等级设置
NONE：默认的 不显示任何日志
BASIC：仅记录请求方法、URL、响应状态码及执行时间
HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息
FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据
-------------Hystrix----------------------------------------------------
Hystrix是一个用于处理分布式系统的延迟和容错的开源库，具体看百度
**********重要的概念**********
服务降级（fallback）
    1.服务器忙xxxxx，不让客户端等待并立刻返回一个友好提示
    2.程序运行异常 超时 服务熔断触发服务降级 线程池/信号量打满也会导致服务降级
服务熔断（break）
    1.服务的降级->进而熔断->恢复调用链路
    类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示
服务限流
    秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行
接近实时的监控（hystrixDashboard）
**********核心注解**********
服务降级（fallback）------------
@EnableHystrix 启动类表示使用Hystrix
@HystrixCommand
    使用在方法上，2种意义
    1.一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的 fallbackMethod调用类中的指定方法
    2.只有@HystrixCommand注解没有具体的fallback方法，表示使用该类的统一fallback方法
@DefaultProperties(defaultFallback = "") 表示该类的统一fallback方法

feign:
  hystrix:
    enabled: true
    # 在feign中开启Hystrix
@FeignClient(value = "服务端名", fallback = PaymentFallbackService.class)
feign和Hystrix配合使用
服务熔断（break）-------------
马丁大神的熔断论文https://martinfowler.com/bliki/CircuitBreaker.html
熔断打开-------请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态
熔断关闭-------熔断关闭不会对服务进行熔断
熔断半开-------部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断
-------------Gateway服务网关----------------------------------------------------
Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。
Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等
Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，基于 Spring 5.0+Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。
Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。
而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。
Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。
**********三大核心概念**********
1.route路由----路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由
2.predicate断言---
    参考的是Java8的java.util.function.Predicate
    开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由
3.filter过滤--和java过滤器类似，前置后置
    指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。
**********gateway工作流程**********
核心逻辑-----路由转发+执行过滤器链
断言----Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理
过滤器--Filter---主要自定义过滤器-----implement GlobalFilter,Ordered
能干什么
    1全局日志记录     2统一网关鉴权     等
---------------------------config---------------------------------------------------------------------
Config（手动动态刷新）动态刷新
    修改YML，暴露监控端口
    @RefreshScope业务类Controller修改
    post请求触发    curl -X POST "http://localhost:3355/actuator/refresh"
---------------------------spring cloud bus---------------------------------------------------------------------
2大核心功能
1.动态刷新全局广播
2.动态刷新定点通知


















